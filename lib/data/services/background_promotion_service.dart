import 'dart:async';
import 'package:agrimarket/data/services/store_promotion_service.dart';
import 'package:get/get.dart';

class BackgroundPromotionService {
  final StorePromotionService _storePromotionService = StorePromotionService();
  Timer? _periodicTimer;
  Timer? _dailyTimer;

  static const Duration _checkInterval = Duration(minutes: 30); // Ki·ªÉm tra m·ªói 30 ph√∫t
  static const Duration _dailyCheckInterval = Duration(hours: 24); // Ki·ªÉm tra h√†ng ng√†y

  /// Kh·ªüi ƒë·ªông background service
  void startBackgroundService() {
    print('üöÄ Starting background promotion service...');

    // Ki·ªÉm tra ƒë·ªãnh k·ª≥ m·ªói 30 ph√∫t
    _periodicTimer = Timer.periodic(_checkInterval, (timer) {
      _checkAndUpdateAllStores();
    });

    // Ki·ªÉm tra h√†ng ng√†y l√∫c 00:00
    _scheduleDailyCheck();

    print('‚úÖ Background promotion service started');
  }

  /// D·ª´ng background service
  void stopBackgroundService() {
    print('üõë Stopping background promotion service...');

    _periodicTimer?.cancel();
    _dailyTimer?.cancel();

    _periodicTimer = null;
    _dailyTimer = null;

    print('‚úÖ Background promotion service stopped');
  }

  /// L√™n l·ªãch ki·ªÉm tra h√†ng ng√†y
  void _scheduleDailyCheck() {
    final now = DateTime.now();
    final nextMidnight = DateTime(now.year, now.month, now.day + 1);
    final timeUntilMidnight = nextMidnight.difference(now);

    _dailyTimer = Timer(timeUntilMidnight, () {
      _checkAndUpdateAllStores();

      // L√™n l·ªãch cho ng√†y ti·∫øp theo
      _scheduleDailyCheck();
    });

    print('üìÖ Scheduled daily promotion check for ${nextMidnight.toString()}');
  }

  /// Ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·∫•t c·∫£ stores
  Future<void> _checkAndUpdateAllStores() async {
    try {
      print('üîÑ Background: Checking promotion status for all stores...');
      await _storePromotionService.updateAllStoresPromotionStatus();
      print('‚úÖ Background: Completed promotion status update for all stores');
    } catch (e) {
      print('‚ùå Background: Error updating promotion status: $e');
    }
  }

  /// Ki·ªÉm tra th·ªß c√¥ng t·∫•t c·∫£ stores
  Future<void> manualCheckAllStores() async {
    try {
      print('üîç Manual: Checking promotion status for all stores...');
      await _storePromotionService.updateAllStoresPromotionStatus();
      print('‚úÖ Manual: Completed promotion status update for all stores');
      Get.snackbar('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i cho t·∫•t c·∫£ stores');
    } catch (e) {
      print('‚ùå Manual: Error updating promotion status: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i: $e');
    }
  }

  /// Ki·ªÉm tra th·ªß c√¥ng m·ªôt store c·ª• th·ªÉ
  Future<void> manualCheckStore(String storeId) async {
    try {
      print('üîç Manual: Checking promotion status for store: $storeId');
      await _storePromotionService.updateStorePromotionStatus(storeId);
      print('‚úÖ Manual: Completed promotion status update for store: $storeId');
      Get.snackbar('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i cho store');
    } catch (e) {
      print('‚ùå Manual: Error updating promotion status for store $storeId: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i: $e');
    }
  }

  /// Dispose service
  void dispose() {
    stopBackgroundService();
  }
}
