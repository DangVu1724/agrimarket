import 'package:agrimarket/data/models/discount_code.dart';
import 'package:agrimarket/data/models/product_promotion.dart';
import 'package:agrimarket/data/models/store.dart';
import 'package:agrimarket/data/repo/promotion_repo.dart';
import 'package:agrimarket/data/repo/store_repo.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';

class StorePromotionService {
  final PromotionRepository _promotionRepo = PromotionRepository();
  final StoreRepository _storeRepo = StoreRepository();
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i cho m·ªôt store
  Future<void> updateStorePromotionStatus(String storeId) async {
    try {
      // Ki·ªÉm tra xem store c√≥ khuy·∫øn m√£i s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông kh√¥ng
      final productDiscounts = await _promotionRepo.getProductDiscountsByStore(storeId);
      final activeProductDiscounts =
          productDiscounts
              .where(
                (discount) =>
                    discount.isValid &&
                    DateTime.now().isAfter(discount.startDate) &&
                    DateTime.now().isBefore(discount.endDate),
              )
              .toList();

      // Ki·ªÉm tra xem store c√≥ m√£ gi·∫£m gi√° ƒëang ho·∫°t ƒë·ªông kh√¥ng
      final discountCodes = await _promotionRepo.getDiscountCodesByStore(storeId);
      final activeDiscountCodes =
          discountCodes.where((code) => code.isOnSale && code.used < code.limit).toList();

      // Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o ƒëang c√≥ khuy·∫øn m√£i kh√¥ng
      final productsWithPromotion = await _checkProductsWithPromotion(storeId);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i isPromotion
      final hasPromotion = activeProductDiscounts.isNotEmpty || activeDiscountCodes.isNotEmpty || productsWithPromotion;

      await _updateStorePromotionField(storeId, hasPromotion);

      print('üîÑ Updated store $storeId promotion status: $hasPromotion');
    } catch (e) {
      print('‚ùå Error updating store promotion status: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i: $e');
    }
  }

  /// Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o ƒëang c√≥ khuy·∫øn m√£i kh√¥ng
  Future<bool> _checkProductsWithPromotion(String storeId) async {
    try {
      final snapshot =
          await _firestore
              .collection('products')
              .where('storeId', isEqualTo: storeId)
              .where('promotion', isNull: false)
              .get();

      for (var doc in snapshot.docs) {
        final data = doc.data();
        final promotionEndDate = data['promotionEndDate'];

        if (promotionEndDate != null) {
          final endDate =
              promotionEndDate is Timestamp
                  ? promotionEndDate.toDate()
                  : DateTime.tryParse(promotionEndDate.toString());

          if (endDate != null && DateTime.now().isBefore(endDate)) {
            return true; // C√≥ s·∫£n ph·∫©m ƒëang khuy·∫øn m√£i
          }
        }
      }
      return false;
    } catch (e) {
      print('‚ùå Error checking products with promotion: $e');
      return false;
    }
  }

  /// C·∫≠p nh·∫≠t tr∆∞·ªùng isPromotion trong database
  Future<void> _updateStorePromotionField(String storeId, bool isPromotion) async {
    try {
      await _firestore.collection('stores').doc(storeId).update({'isPromotion': isPromotion});
    } catch (e) {
      print('‚ùå Error updating store promotion field: $e');
      rethrow;
    }
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i cho t·∫•t c·∫£ stores
  Future<void> updateAllStoresPromotionStatus() async {
    try {
      final storesSnapshot = await _firestore.collection('stores').get();

      for (var doc in storesSnapshot.docs) {
        final storeId = doc.id;
        await updateStorePromotionStatus(storeId);
      }

      print('‚úÖ Updated promotion status for all stores');
    } catch (e) {
      print('‚ùå Error updating all stores promotion status: $e');
      Get.snackbar('L·ªói', 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i khuy·∫øn m√£i cho t·∫•t c·∫£ stores: $e');
    }
  }

  /// L·∫Øng nghe thay ƒë·ªïi khuy·∫øn m√£i v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t store
  void listenToPromotionChanges(String storeId) {
    // L·∫Øng nghe thay ƒë·ªïi trong product_discounts
    _firestore.collection('product_discounts').where('storeId', isEqualTo: storeId).snapshots().listen((snapshot) {
      updateStorePromotionStatus(storeId);
    });

    // L·∫Øng nghe thay ƒë·ªïi trong discount_codes
    _firestore.collection('discount_codes').where('storeId', isEqualTo: storeId).snapshots().listen((snapshot) {
      updateStorePromotionStatus(storeId);
    });

    // L·∫Øng nghe thay ƒë·ªïi trong products
    _firestore.collection('products').where('storeId', isEqualTo: storeId).snapshots().listen((snapshot) {
      updateStorePromotionStatus(storeId);
    });
  }

  /// D·ª´ng l·∫Øng nghe thay ƒë·ªïi
  void dispose() {
    // C√≥ th·ªÉ th√™m logic ƒë·ªÉ d·ª´ng c√°c listeners n·∫øu c·∫ßn
  }
}
