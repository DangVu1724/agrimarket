import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:get/get.dart';
import 'package:flutter/material.dart';

class NetworkService extends GetxService {
  final Connectivity _connectivity = Connectivity();
  final RxBool hasConnection = true.obs;
  bool _dialogShown = false;

  @override
  @override
  void onInit() {
    super.onInit();

    _checkInitialConnection(); // ki·ªÉm tra l·∫ßn ƒë·∫ßu

    _connectivity.onConnectivityChanged.listen((result) {
      print('üîÑ K·∫øt n·ªëi thay ƒë·ªïi: $result');

      // Tr∆∞·ªùng h·ª£p: ƒë√¥i khi `result` l√† List<ConnectivityResult>
      // B·∫°n ƒëang log: [ConnectivityResult.none] (c√≥ d·∫•u ngo·∫∑c vu√¥ng)
      final singleResult = result is List ? result.first : result;

      final connected = singleResult != ConnectivityResult.none;

      print(connected ? '‚úÖ C√≥ m·∫°ng - g·ªçi _closeNoConnectionDialog()' : '‚ùå M·∫•t m·∫°ng - g·ªçi _showNoConnectionDialog()');

      hasConnection.value = connected;

      if (!connected) {
        _showNoConnectionDialog();
      } else {
        _closeNoConnectionDialog();
      }
    });
  }

  void _checkInitialConnection() async {
    final result = await _connectivity.checkConnectivity();
    bool connected = result != ConnectivityResult.none;
    hasConnection.value = connected;

    if (!connected) {
      _showNoConnectionDialog();
    }
  }

  void _showNoConnectionDialog() {
    if (_dialogShown) {
      print('‚ö†Ô∏è Dialog ƒë√£ hi·ªán r·ªìi');
      return;
    }

    _dialogShown = true;
    print('üì£ Hi·ªÉn th·ªã dialog m·∫•t m·∫°ng');

    Get.dialog(
      WillPopScope(
        onWillPop: () async => false,
        child: const AlertDialog(
          title: Text('Kh√¥ng c√≥ m·∫°ng'),
          content: Text('Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet c·ªßa b·∫°n.'),
        ),
      ),
      barrierDismissible: false,
    ).then((_) {
      print('üì• Dialog b·ªã ƒë√≥ng');
      _dialogShown = false;
    });
  }

  void _closeNoConnectionDialog() {
    if (_dialogShown) {
      Get.back();
      _dialogShown = false;
    }
  }
}
